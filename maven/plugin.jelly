<?xml version="1.0"?>

<!--
  Copyright 2005-2006 Vincent Massol

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project 
    xmlns:ant="jelly:ant" 
    xmlns:j="jelly:core" 
    xmlns:util="jelly:util" 
    xmlns:define="jelly:define" 
    xmlns:cargo="cargo">

  <define:taglib uri="cargo">

    <define:tag name="init">

      <!-- We don't want to initialize cargo (ant tasks) several times -->
      <j:if test="${empty(init_cargo_needed)}">
        <ant:echo>========</ant:echo>
        <ant:echo>== Cargo initialization ... </ant:echo>
        <!-- Ant tasks definition -->
        <ant:taskdef resource="cargo.tasks">
          <ant:classpath>
            <ant:pathelement path="${plugin.getDependencyPath('org.codehaus.cargo:cargo-core-uberjar')}"/>
            <ant:pathelement path="${plugin.getDependencyPath('org.codehaus.cargo:cargo-ant')}"/>
            <ant:path refid="maven.dependency.classpath"/>
          </ant:classpath>
        </ant:taskdef>
        <j:set var="init_cargo_needed" scope="parent" value="true"/>
        <ant:echo>== done. </ant:echo>
        <ant:echo>========</ant:echo>
      </j:if>

      <!-- For each container Id -->
      <util:tokenize var="ids" delim="," trim="true">${cargo.containers}</util:tokenize>
      <j:forEach var="idVar" items="${ids}">
        <j:set var="id" value="${idVar.trim()}"/>
        <j:set var="containerConfigStatusVar" value="${id}_is_already_loaded"/>
        <j:set var="containerConfigStatus" value="${context.getVariable(containerConfigStatusVar)}"/>

        <!-- We don't want to initialize a container several times -->
        <j:if test="${empty(containerConfigStatus)}">
        
          <!-- timeout for start and stop the container -->
          <!-- we can't use ant:setProperty because the timeout 
               is a long and not an object
          -->
          <j:set var="timeoutVar" value="cargo.container.${id}.timeout"/>
          <j:set var="timeout" value="${context.getVariable(timeoutVar)}"/>
          
          <ant:echo>========</ant:echo>
          <ant:echo>== Loading configuration for container "${id}"... </ant:echo>
          <ant:cargo timeout="${timeout}">

            <ant:setProperty name="id" value="${id}"/>

            <j:set var="containerIdVar" value="cargo.container.${id}.containerId"/>
            <j:set var="containerId" value="${context.getVariable(containerIdVar)}"/>
            <ant:setProperty name="containerId" value="${containerId}"/>

            <ant:echo>== Container Type : ${containerId}</ant:echo>

            <j:set var="homeVar" value="cargo.container.${id}.home"/>
            <j:set var="home" value="${context.getVariable(homeVar)}"/>
            <j:set var="zipUrlInstallerIdVar" value="cargo.container.${id}.zipUrlInstaller"/>
            <j:set var="zipUrlInstallerId" value="${context.getVariable(zipUrlInstallerIdVar)}"/>

            <!-- Home directory or Installer ? -->
            <j:choose>
              <j:when test="${home != null and !home.trim().equals('')}">
                <ant:setProperty name="home" value="${home}"/>
              </j:when>
              <j:when test="${zipUrlInstallerId !=null and !zipUrlInstallerId.trim().equals('')}">
                <ant:zipUrlInstaller>
                  <j:set var="installUrlVar" value="cargo.zipUrlInstaller.${zipUrlInstallerId}.installUrl"/>
                  <j:set var="installUrl" value="${context.getVariable(installUrlVar)}"/>
                  <j:choose>
                    <j:when test="${installUrl !=null and !installUrl.trim().equals('')}">
                      <ant:setProperty name="installUrl" value="${installUrl}"/>
                    </j:when>
                    <j:otherwise>
                      <ant:fail>You must define an url for the installer [${zipUrlInstallerId}].</ant:fail>
                    </j:otherwise>
                  </j:choose>
                  <j:set var="installDirVar" value="cargo.zipUrlInstaller.${zipUrlInstallerId}.installDir"/>
                  <j:set var="installDir" value="${context.getVariable(installDirVar)}"/>
                  <j:choose>
                    <j:when test="${installDir !=null and !installDir.trim().equals('')}">
                      <ant:setProperty name="installDir" value="${installDir}"/>
                    </j:when>
                    <j:otherwise>
                      <ant:fail>You must define a directory for the installer [${zipUrlInstallerId}].</ant:fail>
                    </j:otherwise>
                  </j:choose>
                  <!-- proxy settings -->
                  <j:set var="proxyHost" value="${context.getVariable('cargo.proxy.host')}"/>
                  <j:if test="${proxyHost != null and !proxyHost.trim().equals('')}">
                    <ant:proxy>
                      <ant:setProperty name="host" value="${proxyHost}"/>
                      <j:set var="proxyPort" value="${context.getVariable('cargo.proxy.port')}"/>
                      <j:if test="${proxyPort != null and !proxyPort.trim().equals('')}">
                        <ant:setProperty name="port" value="${proxyPort}"/>
                      </j:if>
                      <j:set var="proxyUser" value="${context.getVariable('cargo.proxy.user')}"/>
                      <j:if test="${proxyUser != null and !proxyUser.trim().equals('')}">
                        <ant:setProperty name="user" value="${proxyUser}"/>
                        <j:set var="proxyPassword" value="${context.getVariable('cargo.proxy.password')}"/>
                        <j:if test="${proxyPassword != null and !proxyPassword.trim().equals('')}">
                          <ant:setProperty name="password" value="${proxyPassword}"/>
                        </j:if>
                      </j:if>
                      <j:set var="proxyExcludeHosts" value="${context.getVariable('cargo.proxy.excludeHosts')}"/>
                      <j:if test="${proxyExcludeHosts != null and !proxyExcludeHosts.trim().equals('')}">
                        <ant:setProperty name="excludeHosts" value="${proxyExcludeHosts}"/>
                      </j:if>
                    </ant:proxy>
                  </j:if>
                </ant:zipUrlInstaller>
              </j:when>
              <j:otherwise>
                <ant:fail>You must define an installer or an home directory for container [${id}].</ant:fail>
              </j:otherwise>
            </j:choose>

            <j:set var="outputVar" value="cargo.container.${id}.output"/>
            <j:set var="output" value="${context.getVariable(outputVar)}"/>
            <j:if test="${output != null and !output.trim().equals('')}">
              <ant:setProperty name="output" value="${output}"/>
            </j:if>

            <j:set var="logVar" value="cargo.container.${id}.log"/>
            <j:set var="log" value="${context.getVariable(logVar)}"/>
            <j:if test="${log != null and !log.trim().equals('')}">
              <ant:setProperty name="log" value="${log}"/>
            </j:if>
            
            <!-- Container configuration -->
            <ant:configuration>
              <!-- Configuration type -->
              <j:set var="typeVar" value="cargo.container.${id}.config.type"/>
              <j:set var="type" value="${context.getVariable(typeVar)}"/>
              <ant:setProperty name="type" value="${type}"/>

              <ant:echo>== Configuration Type : ${type}</ant:echo>

              <j:set var="dirVar" value="cargo.container.${id}.config.dir"/>
              <j:set var="dir" value="${context.getVariable(dirVar)}"/>
              <j:set var="configHomeVar" value="cargo.container.${id}.config.home"/>
              <j:set var="configHome" value="${context.getVariable(configHomeVar)}"/>

              <j:choose>
                <j:when test="${dir != null and !dir.trim().equals('')}">
                  <ant:setProperty name="dir" value="${dir}"/>
                </j:when>
                <j:when test="${configHome != null and !configHome.trim().equals('')}">
                  <ant:setProperty name="home" value="${configHome}"/>
                </j:when>
                <j:otherwise>
                  <ant:fail>The configuration home directory must be defined for the container [${id}].</ant:fail>
                </j:otherwise>
              </j:choose>

              <j:choose>
                <!-- Standalone -->
                <j:when test="${type.equals('standalone')}">

                  <j:set var="servletPortVar" value="cargo.container.${id}.config.standalone.servlet.port"/>
                  <j:set var="servletPort" value="${context.getVariable(servletPortVar)}"/>
                  <j:if test="${servletPort != null and !servletPort.equals('')}">
                    <ant:property name="cargo.servlet.port" value="${servletPort}"/>
                  </j:if>

                  <j:set var="hostnameVar" value="cargo.container.${id}.config.standalone.hostname"/>
                  <j:set var="hostname" value="${context.getVariable(hostnameVar)}"/>
                  <j:if test="${hostname != null and !hostname.equals('')}">
                    <ant:property name="cargo.hostname" value="${hostname}"/>
                  </j:if>

                  <j:set var="loggingVar" value="cargo.container.${id}.config.standalone.logging"/>
                  <j:set var="logging" value="${context.getVariable(loggingVar)}"/>
                  <j:if test="${logging != null and !logging.equals('')}">
                    <ant:property name="cargo.logging" value="${logging}"/>
                  </j:if>

                  <j:set var="jvmargsVar" value="cargo.container.${id}.config.standalone.jvmargs"/>
                  <j:set var="jvmargs" value="${context.getVariable(jvmargsVar)}"/>
                  <j:if test="${jvmargs != null and !jvmargs.equals('')}">
                    <ant:property name="cargo.jvmargs" value="${jvmargs}"/>
                  </j:if>

                  <!-- Specific settings -->
                  <j:choose>
                    <j:when test="${containerId.equals('orion1x') or containerId.equals('orion2x') or containerId.equals('oc4j9x')}">
                      <j:set var="rmiPortVar" value="cargo.container.${id}.config.standalone.orion.rmi.port"/>
                      <j:set var="rmiPort" value="${context.getVariable(rmiPortVar)}"/>
                      <j:if test="${rmiPort != null and !rmiPort.equals('')}">
                        <ant:property name="cargo.orion.rmi.port" value="${rmiPort}"/>
                      </j:if>
                    </j:when>
                    <j:when test="${containerId.equals('tomcat4x') or containerId.equals('tomcat5x')}">
                      <j:set var="shutdownPortVar" value="cargo.container.${id}.config.standalone.tomcat.shutdown.port"/>
                      <j:set var="shutdownPort" value="${context.getVariable(shutdownPortVar)}"/>
                      <j:if test="${shutdownPort != null and !shutdownPort.equals('')}">
                        <ant:property name="cargo.tomcat.shutdown.port" value="${shutdownPort}"/>
                      </j:if>
                    </j:when>
                  </j:choose>
                </j:when>
                <!-- Existing -->
                <j:when test="${type.equals('existing')}">
                  <ant:fail>Existing configuration not supported for container [${id}].</ant:fail>
                </j:when>
                <!-- Unknown -->
                <j:otherwise>
                  <ant:fail>Unknown configuration type [${type}] for container [${id}].</ant:fail>
                </j:otherwise>
              </j:choose>
              <!-- For each deployable -->
              <j:set var="deployablesVar" value="cargo.container.${id}.deployables"/>
              <util:tokenize var="deployablesIds" delim="," trim="true">${context.getVariable(deployablesVar)}</util:tokenize>
              <j:forEach var="deployableIdVar" items="${deployablesIds}">
                <j:set var="deployableId" value="${deployableIdVar.trim()}"/>
                <j:set var="deployableTypeVar" value="cargo.deployable.${deployableId}.type"/>
                <j:set var="deployableType" value="${context.getVariable(deployableTypeVar)}"/>
                <j:set var="deployableFileVar" value="cargo.deployable.${deployableId}.file"/>
                <j:set var="deployableFile" value="${context.getVariable(deployableFileVar)}"/>
                <j:choose>
                  <j:when test="${deployableFile != null and !deployableFile.equals('')}">
                    <ant:deployable type="${deployableType}" file="${deployableFile}"/>
                  </j:when>
                  <j:otherwise>
                    <ant:fail>The file property must be defined for deployable [${deployableId}].</ant:fail>
                  </j:otherwise>
                </j:choose>
              </j:forEach>
            </ant:configuration>
          </ant:cargo>
          <j:set var="${id}_is_already_loaded" scope="parent" value="true"/>
          <ant:echo>== Configuration for container "${id}" loaded.</ant:echo>
          <ant:echo>========</ant:echo>
        </j:if>
      </j:forEach>
    </define:tag>
  </define:taglib>

  <goal name="cargo:start" description="Start containers">
    <cargo:init/>
    <util:tokenize var="ids" delim="," trim="true">${cargo.containers}</util:tokenize>
    <j:forEach var="id" items="${ids}">
      <ant:echo>== Starting container "${id}"... </ant:echo>

      <!-- Find out whether Maven should wait after the container is started -->
      <j:set var="waitVar" value="cargo.container.wait"/>
      <j:set var="wait" value="${context.getVariable(waitVar)}"/>

      <ant:cargo refid="${id}" wait="${wait}" action="start">
        <j:set var="outputVar" value="cargo.container.${id}.start.output"/>
        <j:set var="output" value="${context.getVariable(outputVar)}"/>
        <j:if test="${output != null and !output.trim().equals('')}">
          <ant:setProperty name="output" value="${output}"/>
        </j:if>
        <j:set var="logVar" value="cargo.container.${id}.start.log"/>
        <j:set var="log" value="${context.getVariable(logVar)}"/>
        <j:if test="${log != null and !log.trim().equals('')}">
          <ant:setProperty name="log" value="${log}"/>
        </j:if>

        <!-- Set system properties that will be passed to the container JVM -->
        <j:set var="syspropertiesVar" value="cargo.container.${id}.sysproperties"/>
        <util:tokenize var="listOfProperties" delim=" ">${context.getVariable(syspropertiesVar)}</util:tokenize>
        <j:forEach var="someProperty" items="${listOfProperties}">
          <sysproperty key="${someProperty}" value="${context.getVariable(someProperty)}"/>
        </j:forEach>
        
      </ant:cargo>
      <ant:echo>== Container "${id}" started.</ant:echo>
    </j:forEach>
  </goal>

  <goal name="cargo:startAndWait"
      description="Start containers and wait for an input of user">
    <j:set var="cargo.container.wait" value="true"/>
    <ant:echo>DEPRECATED: Please set the cargo.container.wait property to true and call the cargo:start goal instead</ant:echo>
    <attainGoal name="cargo:start"/>
  </goal>

  <goal name="cargo:stop" description="Stop containers">
    <cargo:init/>
    <util:tokenize var="ids" delim="," trim="true">${cargo.containers}</util:tokenize>
    <j:forEach var="id" items="${ids}">
      <ant:echo>== Stopping container "${id}"... </ant:echo>
      <ant:cargo refid="${id}" action="stop">
        <j:set var="outputVar" value="cargo.container.${id}.stop.output"/>
        <j:set var="output" value="${context.getVariable(outputVar)}"/>
        <j:if test="${output != null and !output.trim().equals('')}">
          <ant:setProperty name="output" value="${output}"/>
        </j:if>
        <j:set var="logVar" value="cargo.container.${id}.stop.log"/>
        <j:set var="log" value="${context.getVariable(logVar)}"/>
        <j:if test="${log != null and !log.trim().equals('')}">
          <ant:setProperty name="log" value="${log}"/>
        </j:if>
      </ant:cargo>
      <ant:echo>== Container "${id}" stopped.</ant:echo>
    </j:forEach>
  </goal>

</project>
